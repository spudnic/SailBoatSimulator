// generated by Fast Light User Interface Designer (fluid) version 1.0104

#include "gui.h"

inline void gui::cb_x_i(Fl_Slider* o, void*) {
  gl_window->camera(o->value(),'x');
gl_window->redraw();
}
void gui::cb_x(Fl_Slider* o, void* v) {
  ((gui*)(o->parent()->parent()->user_data()))->cb_x_i(o,v);
}

inline void gui::cb_y_i(Fl_Slider* o, void*) {
  gl_window->camera(o->value(),'y');
gl_window->redraw();
}
void gui::cb_y(Fl_Slider* o, void* v) {
  ((gui*)(o->parent()->parent()->user_data()))->cb_y_i(o,v);
}

inline void gui::cb_z_i(Fl_Slider* o, void*) {
  gl_window->camera(o->value(),'z');
gl_window->redraw();
}
void gui::cb_z(Fl_Slider* o, void* v) {
  ((gui*)(o->parent()->parent()->user_data()))->cb_z_i(o,v);
}

inline void gui::cb_quit_i(Fl_Button*, void*) {
  gl_window->quit_cb();
}
void gui::cb_quit(Fl_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_quit_i(o,v);
}

inline void gui::cb_h_i(Fl_Value_Slider* o, void*) {
  gl_window->adjust(o->value(),'k');
gl_window->redraw();
}
void gui::cb_h(Fl_Value_Slider* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_h_i(o,v);
}

inline void gui::cb_animate_i(Fl_Button*, void*) {
  //gl_window->animate_go();
gl_window->redraw();
}
void gui::cb_animate(Fl_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_animate_i(o,v);
}

inline void gui::cb_sheet_i(Fl_Slider* o, void*) {
  gl_window->adjust(o->value(),'s');
gl_window->redraw();
}
void gui::cb_sheet(Fl_Slider* o, void* v) {
  ((gui*)(o->parent()->parent()->user_data()))->cb_sheet_i(o,v);
}

inline void gui::cb_rudder_i(Fl_Slider* o, void*) {
  gl_window->adjust(o->value(),'r');
gl_window->redraw();
}
void gui::cb_rudder(Fl_Slider* o, void* v) {
  ((gui*)(o->parent()->parent()->user_data()))->cb_rudder_i(o,v);
}

inline void gui::cb_reset_ruder_i(Fl_Button*, void*) {
  gl_window->adjust(0,'r');
rudder->value(0);
gl_window->redraw();
}
void gui::cb_reset_ruder(Fl_Button* o, void* v) {
  ((gui*)(o->parent()->parent()->user_data()))->cb_reset_ruder_i(o,v);
}

inline void gui::cb_wind_mag_i(Fl_Slider* o, void*) {
  gl_window->adjust(o->value(),'W');
gl_window->redraw();
}
void gui::cb_wind_mag(Fl_Slider* o, void* v) {
  ((gui*)(o->parent()->parent()->user_data()))->cb_wind_mag_i(o,v);
}

inline void gui::cb_height_i(Fl_Slider* o, void*) {
  gl_window->adjust(o->value(),'h');
gl_window->redraw();
}
void gui::cb_height(Fl_Slider* o, void* v) {
  ((gui*)(o->parent()->parent()->user_data()))->cb_height_i(o,v);
}

inline void gui::cb_length_i(Fl_Slider* o, void*) {
  gl_window->adjust(o->value(),'l');
gl_window->redraw();
}
void gui::cb_length(Fl_Slider* o, void* v) {
  ((gui*)(o->parent()->parent()->user_data()))->cb_length_i(o,v);
}

inline void gui::cb_restart_b_i(Fl_Button*, void*) {
  gl_window->restart();
gl_window->redraw();
}
void gui::cb_restart_b(Fl_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_restart_b_i(o,v);
}

inline void gui::cb_weather_b_i(Fl_Button*, void*) {
  gl_window->weather();
gl_window->redraw();
}
void gui::cb_weather_b(Fl_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_weather_b_i(o,v);
}

inline void gui::cb_down_wind_i(Fl_Button*, void*) {
  gl_window->down_wind();
gl_window->redraw();
}
void gui::cb_down_wind(Fl_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_down_wind_i(o,v);
}

inline void gui::cb_tack_i(Fl_Button*, void*) {
  gl_window->tack();
gl_window->redraw();
}
void gui::cb_tack(Fl_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_tack_i(o,v);
}

inline void gui::cb_reach_i(Fl_Button*, void*) {
  gl_window->reach();
gl_window->redraw();
}
void gui::cb_reach(Fl_Button* o, void* v) {
  ((gui*)(o->parent()->user_data()))->cb_reach_i(o,v);
}

gui::gui() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = form = new Fl_Double_Window(655, 600, "window");
    w = o;
    o->user_data((void*)(this));
    { CGL_Window* o = gl_window = new CGL_Window(5, 5, 645, 425, "gl_window");
      o->box(FL_EMBOSSED_FRAME);
      o->color(FL_BACKGROUND_COLOR);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Group* o = new Fl_Group(10, 450, 80, 100, "Camera");
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Slider* o = x = new Fl_Slider(20, 460, 15, 70, "x");
        o->minimum(-90);
        o->maximum(90);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_x);
      }
      { Fl_Slider* o = y = new Fl_Slider(40, 460, 15, 70, "y");
        o->minimum(-50);
        o->maximum(0);
        o->step(0.1);
        o->value(-25);
        o->callback((Fl_Callback*)cb_y);
      }
      { Fl_Slider* o = z = new Fl_Slider(60, 460, 15, 70, "z");
        o->minimum(-90);
        o->maximum(90);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_z);
      }
      o->end();
    }
    { Fl_Button* o = quit = new Fl_Button(525, 555, 125, 35, "quit");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_quit);
    }
    { Fl_Value_Slider* o = h = new Fl_Value_Slider(440, 440, 80, 15, "h value");
      o->type(1);
      o->maximum(0.5);
      o->step(0.001);
      o->value(0.04);
      o->callback((Fl_Callback*)cb_h);
      o->align(FL_ALIGN_LEFT);
    }
    { Fl_Button* o = animate = new Fl_Button(590, 440, 60, 25, "Run");
      o->type(1);
      o->callback((Fl_Callback*)cb_animate);
    }
    { Fl_Group* o = new Fl_Group(95, 450, 80, 145, "Sail boat");
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Slider* o = sheet = new Fl_Slider(125, 465, 15, 75, "sheet");
        o->minimum(-20);
        o->maximum(20);
        o->step(1);
        o->callback((Fl_Callback*)cb_sheet);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Slider* o = rudder = new Fl_Slider(100, 545, 65, 15, "rudder");
        o->type(1);
        o->minimum(-25);
        o->maximum(25);
        o->step(1);
        o->callback((Fl_Callback*)cb_rudder);
      }
      { Fl_Button* o = reset_ruder = new Fl_Button(105, 575, 50, 15, "straight");
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_reset_ruder);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(180, 450, 75, 145, "Wind");
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Slider* o = wind_mag = new Fl_Slider(210, 465, 15, 75, "magnitude");
        o->minimum(0.2);
        o->maximum(20);
        o->step(1);
        o->callback((Fl_Callback*)cb_wind_mag);
        o->align(FL_ALIGN_TOP);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(265, 450, 85, 75, "Wave");
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Slider* o = height = new Fl_Slider(270, 465, 75, 15, "Height");
        o->type(1);
        o->minimum(0.5);
        o->maximum(2);
        o->step(0.0001);
        o->value(1);
        o->callback((Fl_Callback*)cb_height);
        o->align(FL_ALIGN_TOP);
      }
      { Fl_Slider* o = length = new Fl_Slider(270, 495, 75, 15, "length");
        o->type(1);
        o->minimum(0.1);
        o->maximum(0.5);
        o->step(0.001);
        o->value(0.5);
        o->callback((Fl_Callback*)cb_length);
        o->align(FL_ALIGN_TOP);
      }
      o->end();
    }
    { Fl_Button* o = restart_b = new Fl_Button(595, 470, 50, 25, "restart");
      o->callback((Fl_Callback*)cb_restart_b);
    }
    { Fl_Button* o = weather_b = new Fl_Button(360, 560, 70, 25, "weather");
      o->callback((Fl_Callback*)cb_weather_b);
    }
    { Fl_Button* o = down_wind = new Fl_Button(440, 560, 75, 25, "down wind");
      o->callback((Fl_Callback*)cb_down_wind);
    }
    { Fl_Button* o = tack = new Fl_Button(400, 530, 70, 25, "tack");
      o->callback((Fl_Callback*)cb_tack);
    }
    { Fl_Button* o = reach = new Fl_Button(400, 495, 75, 25, "reach");
      o->callback((Fl_Callback*)cb_reach);
    }
    o->end();
    o->resizable(o);
  }
  filename[0] = '\0';
}

void gui::show() {
  form->show();
gl_window->show();
}
